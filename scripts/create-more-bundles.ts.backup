import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

function getUniqueRandomProducts(products: any[], count: number): number[] {
  const indices: number[] = []
  const used = new Set<number>()
  
  while (indices.length < count && indices.length < products.length) {
    const randomIndex = Math.floor(Math.random() * products.length)
    if (!used.has(randomIndex)) {
      indices.push(randomIndex)
      used.add(randomIndex)
    }
  }
  
  return indices
}

async function createMoreBundles() {
  console.log('üå± Creating more product bundles with unique products...')

  try {
    const categories = await prisma.category.findMany()
    const products = await prisma.product.findMany({
      where: { isActive: true }
    })

    if (products.length < 10) {
      console.log('‚ùå Not enough products found.')
      return
    }

    // More bundles with guaranteed unique products per bundle
    const moreBundles = [
      {
        name: 'Paket Anniversary Special',
        description: 'Paket istimewa untuk merayakan anniversary atau moment berharga. Kemasan mewah dengan produk pilihan terbaik.',
        image: '/images/products/placeholder.jpg',
        price: 385000,
        originalPrice: 475000,
        discount: 19,
        isActive: true,
        isFeatured: true,
        categoryId: categories[Math.floor(Math.random() * categories.length)].id,
        productCount: 4
      },
      {
        name: 'Paket Student Budget',
        description: 'Paket hemat untuk mahasiswa atau pelajar. Harga terjangkau tapi tetap berkualitas tinggi.',
        image: '/images/products/placeholder.jpg',
        price: 55000,
        originalPrice: 75000,
        discount: 27,
        isActive: true,
        isFeatured: false,
        categoryId: categories[Math.floor(Math.random() * categories.length)].id,
        productCount: 3
      },
      {
        name: 'Paket Family Gathering',
        description: 'Paket besar untuk acara kumpul keluarga. Porsi melimpah dengan berbagai variasi rasa yang disukai semua anggota keluarga.',
        image: '/images/products/placeholder.jpg',
        price: 295000,
        originalPrice: 365000,
        discount: 19,
        isActive: true,
        isFeatured: true,
        categoryId: categories[Math.floor(Math.random() * categories.length)].id,
        productCount: 5
      },
      {
        name: 'Paket Office Snack',
        description: 'Paket camilan untuk kantor yang sempurna untuk break time atau meeting. Kemasan praktis dan mudah dibagi.',
        image: '/images/products/placeholder.jpg',
        price: 165000,
        originalPrice: 205000,
        discount: 20,
        isActive: true,
        isFeatured: false,
        categoryId: categories[Math.floor(Math.random() * categories.length)].id,
        productCount: 4
      },
      {
        name: 'Paket Luxury Premium',
        description: 'Paket premium dengan produk-produk eksklusif dan kemasan mewah. Cocok untuk hadiah VIP atau klien penting.',
        image: '/images/products/placeholder.jpg',
        price: 525000,
        originalPrice: 650000,
        discount: 19,
        isActive: true,
        isFeatured: true,
        categoryId: categories[Math.floor(Math.random() * categories.length)].id,
        productCount: 3
      }
    ]

    let createdCount = 0

    for (const bundleData of moreBundles) {
      try {
        // Create the bundle
        const bundle = await prisma.productBundle.create({
          data: {
            name: bundleData.name,
            description: bundleData.description,
            image: bundleData.image,
            price: bundleData.price,
            originalPrice: bundleData.originalPrice,
            discount: bundleData.discount,
            isActive: bundleData.isActive,
            isFeatured: bundleData.isFeatured,
            categoryId: bundleData.categoryId,
          }
        })

        // Get unique random products for this bundle
        const uniqueIndices = getUniqueRandomProducts(products, bundleData.productCount)
        
        // Create bundle items with unique products
        for (const productIndex of uniqueIndices) {
          const product = products[productIndex]
          const quantity = Math.floor(Math.random() * 3) + 1 // 1-3 quantity
          
          await prisma.bundleItem.create({
            data: {
              bundleId: bundle.id,
              productId: product.id,
              quantity: quantity
            }
          })
        }

        createdCount++
        console.log(`‚úÖ Created bundle: ${bundle.name} (${uniqueIndices.length} unique products)`)
      } catch (error) {
        console.error(`‚ùå Error creating bundle "${bundleData.name}":`, error)
      }
    }

    console.log(`üéâ Successfully created ${createdCount} more bundles!`)

    // Display final summary
    const totalBundles = await prisma.productBundle.count()
    const featuredBundles = await prisma.productBundle.count({
      where: { isFeatured: true }
    })
    const activeBundles = await prisma.productBundle.count({
      where: { isActive: true }
    })

    console.log('\nüìä Final Database Summary:')
    console.log(`   Total Bundles: ${totalBundles}`)
    console.log(`   Featured Bundles: ${featuredBundles}`)
    console.log(`   Active Bundles: ${activeBundles}`)

    // Show some bundles with their items
    console.log('\nüîç Sample Bundle Details:')
    const sampleBundles = await prisma.productBundle.findMany({
      take: 3,
      include: {
        bundleItems: {
          include: {
            product: {
              select: {
                name: true,
                price: true
              }
            }
          }
        },
        category: {
          select: {
            name: true
          }
        }
      }
    })

    sampleBundles.forEach(bundle => {
      console.log(`\nüì¶ ${bundle.name}`)
      console.log(`   Category: ${bundle.category?.name}`)
      console.log(`   Price: Rp ${bundle.price.toLocaleString('id-ID')} (was Rp ${bundle.originalPrice?.toLocaleString('id-ID')})`)
      console.log(`   Items:`)
      bundle.bundleItems.forEach(item => {
        console.log(`     - ${item.quantity}x ${item.product.name} (Rp ${item.product.price.toLocaleString('id-ID')})`)
      })
    })

  } catch (error) {
    console.error('‚ùå Error creating more bundles:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

createMoreBundles()
  .catch((error) => {
    console.error('‚ùå Script failed:', error)
    process.exit(1)
  })
